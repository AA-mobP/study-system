{
  "title": "أنواع الأخطاء ومعالجة الاستثناءات في لغة C#",
  "timer": 45,
  "flashcards": [
    {
      "question": "ما هما نوعا الأخطاء المحتملة عند كتابة وتنفيذ الكود في إطار عمل .NET؟",
      "answer": "أخطاء الترجمة (Compilation Errors) وأخطاء وقت التشغيل (Runtime Errors)."
    },
    {
      "question": "ما هو الخطأ الذي يحدث بسبب أخطاء نحوية في البرنامج؟",
      "answer": "خطأ الترجمة (Compilation Error)."
    },
    {
      "question": "اذكر أمثلة على أخطاء الترجمة.",
      "answer": "نسيان علامات الاقتباس المزدوجة في قيمة سلسلة نصية، أو الفواصل المنقوطة، أو كتابة كلمات مفتاحية بشكل خاطئ."
    },
    {
      "question": "هل تمنع أخطاء الترجمة تنفيذ البرنامج؟",
      "answer": "لا، يمكن تصحيحها قبل تنفيذ البرنامج."
    },
    {
      "question": "ما هو الخطأ الذي يحدث أثناء تنفيذ البرنامج؟",
      "answer": "خطأ وقت التشغيل (Runtime Error)."
    },
    {
      "question": "اذكر أمثلة على أخطاء وقت التشغيل.",
      "answer": "إدخال بيانات خاطئة، أو محاولة فتح ملف لا يوجد إذن له، أو محاولة الاتصال بقاعدة بيانات بمعلومات خاطئة."
    },
    {
      "question": "ما مدى خطورة أخطاء وقت التشغيل؟",
      "answer": "خطيرة، لأنها تنهي البرنامج بشكل غير طبيعي."
    },
    {
      "question": "هل يكتشف المترجم الأخطاء المنطقية؟",
      "answer": "لا، المترجم يتحقق فقط من الأخطاء النحوية."
    },
    {
      "question": "ما هو الكائن المسؤول عن الإنهاء غير الطبيعي للبرنامج عند حدوث أخطاء وقت التشغيل؟",
      "answer": "كائن الاستثناء (Exception Object)."
    },
    {
      "question": "هل أخطاء وقت التشغيل هي نفسها الاستثناءات؟",
      "answer": "لا، الاستثناءات هي فئات مسؤولة عن الإنهاء غير الطبيعي للبرنامج عند حدوث أخطاء وقت التشغيل."
    },
    {
      "question": "أين يتم تعريف فئات الاستثناءات في C#؟",
      "answer": "في مكتبات الفئات الأساسية (BCL - Base Class Libraries)."
    },
    {
      "question": "ماذا يفعل 'مدير الاستثناء' تحت CLR عند حدوث خطأ في وقت التشغيل؟",
      "answer": "يحدد نوع الخطأ، ثم ينشئ كائنًا من فئة الاستثناء ذات الصلة ويرميه."
    },
    {
      "question": "ماذا يحدث عندما يتم رفع استثناء في برنامج C#؟",
      "answer": "يتم إنهاء تنفيذ البرنامج بشكل غير طبيعي، ولا يتم تنفيذ الأوامر التي تلي الاستثناء."
    },
    {
      "question": "ما هو تعريف الاستثناء من الناحية التقنية؟",
      "answer": "حدث يقع أثناء تنفيذ البرنامج ويعطل التدفق الطبيعي لتنفيذ الأوامر."
    },
    {
      "question": "هل رسالة الاستثناء التي يولدها .NET مفهومة للمستخدم؟",
      "answer": "لا، هي رسالة تقنية غير مفهومة للمستخدم النهائي."
    },
    {
      "question": "ما هو حل مشكلة رسائل الاستثناء غير المفهومة للمستخدم؟",
      "answer": "على المطور تحويل رسائل استثناء .NET إلى تنسيقات مفهومة للمستخدم النهائي من خلال معالجة الاستثناء."
    },
    {
      "question": "ما هي معالجة الاستثناءات في C#؟",
      "answer": "عملية التقاط الاستثناء لتحويل رسالة CLR إلى رسالة مفهومة للمستخدم النهائي ووقف الإنهاء غير الطبيعي للبرنامج."
    },
    {
      "question": "ما هي فوائد معالجة الاستثناءات؟",
      "answer": "منع الإنهاء غير الطبيعي، وإجراءات تصحيحية محتملة، وعرض رسائل خطأ سهلة للمستخدم."
    },
    {
      "question": "لماذا نحتاج إلى معالجة الاستثناءات في C#؟",
      "answer": "لإيقاف الإنهاء غير الطبيعي للبرنامج وتزويد المستخدم برسائل مفهومة."
    },
    {
      "question": "اذكر خطوات معالجة الاستثناء في C#.",
      "answer": "إعداد كائن الاستثناء، رميه، التقاطه، واتخاذ الإجراءات اللازمة."
    },
    {
      "question": "ما هما الطريقتان لمعالجة الاستثناء في .NET؟",
      "answer": "التنفيذ المنطقي (Logical Implementation) وتطبيق 'Try Catch'."
    },
    {
      "question": "ما هو التنفيذ المنطقي في C#؟",
      "answer": "معالجة الاستثناءات باستخدام عبارات منطقية مثل 'if-else'."
    },
    {
      "question": "ما هي الأولوية الأولى في البرمجة في الوقت الفعلي لمعالجة الاستثناءات؟",
      "answer": "التنفيذ المنطقي."
    },
    {
      "question": "متى يجب استخدام 'try-catch'؟",
      "answer": "إذا كان من المستحيل معالجة الاستثناء باستخدام التنفيذ المنطقي."
    },
    {
      "question": "ما هي الكلمات المفتاحية الثلاث التي يوفرها إطار عمل .NET لتطبيق 'try-catch'؟",
      "answer": "Try، Catch، و finally."
    },
    {
      "question": "ماذا يجب أن يحتوي 'try block'؟",
      "answer": "العبارات التي قد تسبب استثناءً والعبارات ذات الصلة بها."
    },
    {
      "question": "ما هو دور 'catch block'؟",
      "answer": "يلتقط الاستثناء الذي تم رميه من 'try block' ويحتوي على منطق لاتخاذ الإجراءات اللازمة."
    },
    {
      "question": "هل 'finally block' إجباري؟",
      "answer": "لا، كتابة 'finally block' اختياري."
    },
    {
      "question": "ما هي خاصية 'Message' لفئة الاستثناء؟",
      "answer": "تخزن سبب حدوث الاستثناء."
    },
    {
      "question": "ما هي خاصية 'StackTrace' لفئة الاستثناء؟",
      "answer": "تخزن معلومات إضافية عن الاستثناء مثل سبب حدوثه، والسطر الذي حدث فيه، للمساعدة في حل المشكلة."
    }
  ],
  "quizQuestions": [
    {
      "question": "أي نوع من الأخطاء يحدث بسبب الأخطاء النحوية في الكود؟",
      "incorrectAnswers": ["خطأ منطقي", "خطأ وقت التشغيل", "خطأ غير متوقع"],
      "correctAnswer": "خطأ الترجمة"
    },
    {
      "question": "متى تحدث أخطاء وقت التشغيل؟",
      "incorrectAnswers": [
        "أثناء كتابة الكود",
        "أثناء ترجمة الكود",
        "بعد اكتمال التنفيذ"
      ],
      "correctAnswer": "أثناء تنفيذ البرنامج"
    },
    {
      "question": "ما هو الخطر الرئيسي لأخطاء وقت التشغيل؟",
      "incorrectAnswers": [
        "أنها تبطئ البرنامج",
        "أنها تجعل الكود أصعب للقراءة",
        "أنها لا يتم التقاطها من قبل المترجم"
      ],
      "correctAnswer": "أنها تنهي البرنامج بشكل غير طبيعي"
    },
    {
      "question": "ما هو الكائن المسؤول عن الإنهاء غير الطبيعي للبرنامج عند حدوث خطأ في وقت التشغيل؟",
      "incorrectAnswers": ["البرنامج نفسه", "المترجم", "المستخدم"],
      "correctAnswer": "كائن الاستثناء"
    },
    {
      "question": "ما هي فئة C# التي تعتبر فئة خارقة لجميع فئات الاستثناءات الأخرى؟",
      "incorrectAnswers": [
        "`DivideByZeroException`",
        "`FormatException`",
        "`System.Exception`"
      ],
      "correctAnswer": "لا توجد إجابة صحيحة"
    },
    {
      "question": "ماذا يحدث للعبارات التي تلي العبارة المسببة للاستثناء في 'try block'؟",
      "incorrectAnswers": [
        "يتم تنفيذها دائمًا",
        "يتم تنفيذها إذا لم يتم العثور على 'catch block' مناسب",
        "يتم تنفيذها فقط في 'finally block'"
      ],
      "correctAnswer": "لا يتم تنفيذها"
    },
    {
      "question": "لماذا يُعتبر الاستثناء 'حدثًا'؟",
      "incorrectAnswers": [
        "لأنه يوقف تنفيذ البرنامج",
        "لأنه يحدث فجأة",
        "لأنه يتم التقاطه بواسطة 'catch block'"
      ],
      "correctAnswer": "لأن CLR يقوم بتنفيذ بعض المنطق داخليًا لإعداد رسائل الاستثناء"
    },
    {
      "question": "ما هو الغرض من معالجة الاستثناءات؟",
      "incorrectAnswers": [
        "لجعل الكود أسرع",
        "لإظهار رسائل خطأ تقنية",
        "لمنع حدوث الأخطاء تمامًا"
      ],
      "correctAnswer": "لمنع الإنهاء غير الطبيعي للبرنامج"
    },
    {
      "question": "أي طريقة لمعالجة الاستثناء يجب أن تُعطى الأولوية الأولى في البرمجة في الوقت الفعلي؟",
      "incorrectAnswers": [
        "تطبيق 'Try Catch'",
        "الاستخدام المفرط لـ 'finally'",
        "استخدام 'generic catch'"
      ],
      "correctAnswer": "التنفيذ المنطقي"
    },
    {
      "question": "ما هي الكلمة المفتاحية المستخدمة في C# لإنشاء كتلة من الكود التي يجب تنفيذها دائمًا، بغض النظر عما إذا كان قد حدث استثناء أم لا؟",
      "incorrectAnswers": ["`try`", "`catch`", "`throw`"],
      "correctAnswer": "`finally`"
    },
    {
      "question": "ماذا يحدث إذا تم تنفيذ جميع العبارات في 'try block' بنجاح؟",
      "incorrectAnswers": [
        "يتم تنفيذ 'catch block' بعد ذلك",
        "يتم تنفيذ 'finally block' فقط إذا كان موجودًا",
        "ينتقل التحكم إلى أول عبارة بعد 'try block'"
      ],
      "correctAnswer": "ينتقل التحكم مباشرة إلى أول عبارة بعد 'catch blocks'"
    },
    {
      "question": "ماذا يسمى 'catch block' الذي لا يستخدم فئة استثناء محددة؟",
      "incorrectAnswers": [
        "`specific catch`",
        "`empty catch`",
        "`finally catch`"
      ],
      "correctAnswer": "`generic catch`"
    },
    {
      "question": "ما هي المشكلة مع 'generic catch block'؟",
      "incorrectAnswers": [
        "لا يمكنه التقاط جميع الاستثناءات",
        "لا يوقف الإنهاء غير الطبيعي",
        "يجب أن يكون هو 'catch block' الوحيد"
      ],
      "correctAnswer": "يعرض نفس الرسالة للمستخدم النهائي بغض النظر عن نوع الخطأ"
    },
    {
      "question": "أي خاصية لفئة الاستثناء تخزن اسم التطبيق الذي تم منه رفع الاستثناء؟",
      "incorrectAnswers": ["`Message`", "`HelpLink`", "`StackTrace`"],
      "correctAnswer": "`Source`"
    },
    {
      "question": "ما هي خاصية فئة الاستثناء التي تخزن السبب الذي حدث من أجله الاستثناء؟",
      "incorrectAnswers": ["`Source`", "`StackTrace`", "`HelpLink`"],
      "correctAnswer": "`Message`"
    },
    {
      "question": "ما هو دور 'HelpLink' في فئة الاستثناء؟",
      "incorrectAnswers": [
        "يخزن رسالة خطأ قصيرة",
        "يحدد نوع الخطأ",
        "يحتوي على معلومات حول الكلاس والميثود التي حدث فيها الخطأ"
      ],
      "correctAnswer": "يوفر رابطًا لملف أو عنوان URL للحصول على معلومات مفيدة حول الاستثناء"
    },
    {
      "question": "أي نوع من الأخطاء يمكن أن يحدث عند محاولة القسمة على صفر؟",
      "incorrectAnswers": [
        "`FormatException`",
        "`NullReferenceException`",
        "`IndexOutOfRangeException`"
      ],
      "correctAnswer": "`DivideByZeroException`"
    },
    {
      "question": "ما هو الدور الرئيسي للمطور في التعامل مع رسائل الاستثناء؟",
      "incorrectAnswers": [
        "إيقاف البرنامج تمامًا",
        "إرسال رسائل .NET الأصلية إلى المستخدم",
        "ترك المستخدم يحل المشكلة بنفسه"
      ],
      "correctAnswer": "تحويل رسائل الاستثناء إلى تنسيق سهل الفهم للمستخدم"
    },
    {
      "question": "هل يمكن لبرنامج C# أن يحتوي على أكثر من 'catch block' واحد لنفس 'try block'؟",
      "incorrectAnswers": [
        "لا، لا يمكن إلا لـ 'catch block' واحد لكل 'try block'",
        "نعم، ولكن فقط إذا كان هناك 'generic catch block'",
        "لا، يجب أن يتم استخدام 'finally block' بدلاً من ذلك"
      ],
      "correctAnswer": "نعم، يمكنه التعامل مع أنواع مختلفة من الاستثناءات"
    },
    {
      "question": "ما هو دور CLR عند حدوث استثناء؟",
      "incorrectAnswers": [
        "يصحح الخطأ تلقائيًا",
        "يواصل تنفيذ البرنامج كالمعتاد",
        "يقوم بإرسال رسالة إلى المطور"
      ],
      "correctAnswer": "ينشئ كائنًا من فئة الاستثناء ويستخدم الكلمة المفتاحية `throw` لإنهاء البرنامج"
    },
    {
      "question": "عند استخدام 'try-catch'، ما هو المبدأ الأساسي الذي يصف تدفق التحكم؟",
      "incorrectAnswers": [
        "تنفذ الكتل دائمًا بالترتيب: `try`, `catch`, `finally`",
        "يتم تنفيذ `try` و `catch` فقط إذا حدث خطأ",
        "لا يمكن أن يوجد `finally` بدون `catch`"
      ],
      "correctAnswer": "`catch block` يلتقط استثناءً يتم رميه من `try block`."
    },
    {
      "question": "ما هو الغرض من `Console.ReadKey()` في أمثلة الكود؟",
      "incorrectAnswers": [
        "يقرأ سطرًا من النص من المستخدم",
        "يظهر الرسائل النصية على الشاشة",
        "يمنع البرنامج من الإنهاء تلقائيًا"
      ],
      "correctAnswer": "يوقف تنفيذ البرنامج مؤقتًا حتى يضغط المستخدم على مفتاح"
    },
    {
      "question": "ما الذي لا يكتشفه المترجم في C#؟",
      "incorrectAnswers": [
        "الأخطاء النحوية",
        "الكلمات المفتاحية المكتوبة بشكل خاطئ",
        "علامات الاقتباس المفقودة"
      ],
      "correctAnswer": "الأخطاء المنطقية"
    },
    {
      "question": "أي من الخيارات التالية هو مثال على خطأ في وقت التشغيل؟",
      "incorrectAnswers": [
        "كتابة `Console.Writeline` بدلاً من `Console.WriteLine`",
        "عدم وجود فاصلة منقوطة في نهاية العبارة",
        "الإعلان عن فئة مجردة ككائن جديد"
      ],
      "correctAnswer": "محاولة فتح ملف غير موجود"
    },
    {
      "question": "ما هو اسم فئة الاستثناء التي تحدث عند محاولة تحويل سلسلة نصية غير صالحة إلى عدد صحيح؟",
      "incorrectAnswers": [
        "`DivideByZeroException`",
        "`NullReferenceException`",
        "`IndexOutOfRangeException`"
      ],
      "correctAnswer": "`FormatException`"
    },
    {
      "question": "ما هو دور `Exception Manager` تحت `CLR`؟",
      "incorrectAnswers": [
        "تصحيح أخطاء وقت التشغيل",
        "إخفاء الاستثناءات عن المطور",
        "طباعة رسائل خطأ عامة"
      ],
      "correctAnswer": "تحديد نوع الخطأ وإنشاء كائن استثناء مناسب"
    },
    {
      "question": "ما هي الطريقة التي يمكن أن تمنع الإنهاء غير الطبيعي للبرنامج؟",
      "incorrectAnswers": [
        "إزالة جميع عبارات `try-catch`",
        "إهمال رسائل الاستثناء",
        "استخدام `generic catch` فقط"
      ],
      "correctAnswer": "معالجة الاستثناءات"
    },
    {
      "question": "أي من العبارات التالية صحيحة؟",
      "incorrectAnswers": [
        "`finally block` لا يتم تنفيذه إذا حدث استثناء",
        "`catch block` يمكنه أن يأخذ أي عدد من المعلمات",
        "`try block` ليس إجباريًا عند استخدام `catch`"
      ],
      "correctAnswer": "يمكن استخدام أكثر من `catch block` لـ `try block` واحد"
    },
    {
      "question": "ماذا تعني `BCL` في سياق الاستثناءات؟",
      "incorrectAnswers": [
        "Block Class Libraries",
        "Base Catch Libraries",
        "Basic Code Libraries"
      ],
      "correctAnswer": "Base Class Libraries"
    },
    {
      "question": "أي من خصائص فئة الاستثناء يمكن أن يساعد المطور في معرفة رقم السطر الذي حدث فيه الاستثناء؟",
      "incorrectAnswers": ["`Message`", "`Source`", "`HelpLink`"],
      "correctAnswer": "`StackTrace`"
    },
    {
      "question": "ما هو الغرض من `throw` في سياق الاستثناءات؟",
      "incorrectAnswers": [
        "طباعة رسالة خطأ",
        "منع الاستثناء من الحدوث",
        "إعادة تنفيذ الجزء الخاطئ من الكود"
      ],
      "correctAnswer": "إنهاء البرنامج بشكل غير طبيعي"
    },
    {
      "question": "أي من هذه الأخطاء لا يكتشفها المترجم؟",
      "incorrectAnswers": [
        "عدم وجود `using System;`",
        "كتابة اسم فئة خاطئ",
        "نسيان الفواصل المنقوطة"
      ],
      "correctAnswer": "القسمة على صفر"
    },
    {
      "question": "ماذا يحدث إذا لم يتم العثور على 'catch block' مناسب في حالة وجود استثناء؟",
      "incorrectAnswers": [
        "ينتقل التحكم إلى `finally block` فقط",
        "يتم تجاهل الاستثناء",
        "يتم التعامل مع الاستثناء بواسطة 'generic catch block'"
      ],
      "correctAnswer": "يتم إنهاء تنفيذ البرنامج بشكل غير طبيعي"
    },
    {
      "question": "ماذا يميز رسالة الاستثناء التي يولدها .NET عن الرسالة التي يولدها المطور؟",
      "incorrectAnswers": [
        "رسالة المطور أقل تفصيلاً",
        "رسالة المطور يمكن أن يتم ترجمتها",
        "رسالة .NET تكون دائمًا باللغة الإنجليزية"
      ],
      "correctAnswer": "رسالة .NET موجهة للمطورين وليست مفهومة للمستخدم النهائي"
    },
    {
      "question": "ما هي الفائدة من استخدام `specific catch blocks` بدلاً من `generic catch block`؟",
      "incorrectAnswers": [
        "تزيد من سرعة البرنامج",
        "تمنع وقوع الأخطاء تمامًا",
        "تجعل البرنامج يقرأ بشكل أفضل"
      ],
      "correctAnswer": "تسمح بفهم المزيد عن الاستثناء الذي حدث"
    },
    {
      "question": "ما هو أفضل نهج لإدارة الأخطاء في تطبيق C#؟",
      "incorrectAnswers": [
        "استخدام 'try-catch' لكل عبارة",
        "الاعتماد على 'generic catch' فقط",
        "تجاهل الأخطاء التي لا تنهي البرنامج"
      ],
      "correctAnswer": "استخدام التنفيذ المنطقي أولاً، واللجوء إلى 'try-catch' عندما يكون ذلك ضروريًا"
    },
    {
      "question": "ما هو السبب الرئيسي لحدوث أخطاء وقت التشغيل؟",
      "incorrectAnswers": [
        "مشاكل في الشبكة",
        "أخطاء نحوية",
        "أخطاء في نظام التشغيل"
      ],
      "correctAnswer": "عدم صحة مدخلات المستخدم أو عدم وجود الموارد المطلوبة"
    },
    {
      "question": "ما هي إحدى الفوائد الرئيسية لمعالجة الاستثناءات بالنسبة للمستخدم النهائي؟",
      "incorrectAnswers": [
        "تزيد من سرعة البرنامج",
        "تقلل من حجم الكود",
        "تجعل البرنامج يحل المشكلة تلقائيًا"
      ],
      "correctAnswer": "تزويده برسائل مفهومة حتى يتمكن من اتخاذ الإجراءات اللازمة"
    },
    {
      "question": "ما هو الخطر الذي يتم تسليط الضوء عليه في مثال تحويل الأموال غير المكتمل؟",
      "incorrectAnswers": [
        "أن البرنامج قد يصبح بطيئًا",
        "أن المترجم لن يكتشف الخطأ",
        "أن المطور قد يكتب كودًا معقدًا"
      ],
      "correctAnswer": "أن خطأ وقت التشغيل قد يترك"
    }
  ]
}
